server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /run/promtail/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Mixed OPNsense and AdGuard logs from single file
  - job_name: opnsense-mixed-logs
    static_configs:
    - targets:
        - localhost
      labels:
        job: opnsense-mixed
        host: opnsense  
        env: home
        __path__: /var/log/opnsense/firewall.log
    pipeline_stages:
      # First, parse the syslog format to extract components
      - regex:
          expression: '^(?P<timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+(?P<program>\S+)(?:\[(?P<pid>\d+)\])?:?\s*(?P<message>.*)'
      
      # Branch processing based on program/content type
      - match:
          selector: '{job="opnsense-mixed"} |~ "AdGuardHome.*query"'
          stages:
            # This is an AdGuard query log
            - labels:
                log_type: "adguard"
            # Parse AdGuard query format
            - regex:
                expression: 'query\s+(?P<domain>\S+)\s+(?P<query_type>\w+)\s+from client\s+(?P<client_ip>[0-9a-fA-F:\.]+)(?:\s+\((?P<client_name>[^\)]+)\))?\s+(?P<status>allowed|blocked|cached)\s+(?P<elapsed_ms>\d+)ms(?:\s+upstream\s+(?P<upstream>\S+))?(?:\s+rule\s+(?P<rule>\S+))?'
                source: message
            - labels:
                domain:
                query_type:
                client_ip:
                client_name:
                status:
                elapsed_ms:
                upstream:
                rule:
      
      - match:
          selector: '{job="opnsense-mixed"} |~ "filterlog"'
          stages:
            # This is a firewall log
            - labels:
                log_type: "firewall"
            # Parse firewall log format
            - regex:
                expression: '.*(?:rule (?:\d+(?:/\d+)? )?\((?P<rule_label>[^\)]+)\) )?.* (?P<action>pass|block) (?P<direction>in|out) on (?P<iface>\w+): .* (?P<proto>\w+) (?P<src_ip>[0-9a-fA-F:\.]+)(?:\.(?P<src_port>\d+))? > (?P<dst_ip>[0-9a-fA-F:\.]+)(?:\.(?P<dst_port>\d+))?.*'
                source: message
            - labels:
                rule_label:
                action:
                direction:
                iface:
                proto:
                src_ip:
                dst_ip:
                src_port:
                dst_port:
            # GeoIP enrichment for firewall logs only
            - geoip:
                db: /etc/promtail/geoip/GeoLite2-City.mmdb
                source: src_ip
                db_type: city
                labels:
                  country_iso: country.iso_code
                  country_name: country.names.en
                  city: city.names.en
                  latitude: location.latitude
                  longitude: location.longitude
                  continent: continent.code

  # Event Collector JSON logs from media services
  - job_name: event-collector-jsonl
    static_configs:
      - targets: [localhost]
        labels:
          job: event-collector
          host: dashboard
          env: home
          __path__: /var/log/event-collector/*.jsonl
    pipeline_stages:
      # Parse JSONL format
      - json:
          expressions:
            timestamp: timestamp
            service: service
            instance: instance
            action: action
            title: title
            quality: quality
            size_bytes: size_bytes
            details: details
      # Extract nested details if needed
      - json:
          expressions:
            indexer: details.indexer
            torrent_hash: details.torrent_hash
            path: details.path
          source: details
      - labels:
          service:
          instance:
          action:
          quality:
          indexer:
      # Convert timestamp format if needed
      - timestamp:
          source: timestamp
          format: RFC3339
      # Add size formatting for better readability
      - template:
          source: size_gb
          template: '{{ if .size_bytes }}{{ div .size_bytes 1073741824 | printf "%.2f" }}{{ else }}0{{ end }}'

  # System logs for monitoring stack health (optional)
  - job_name: docker-logs
    static_configs:
      - targets: [localhost]
        labels:
          job: docker
          host: dashboard
          env: home
          __path__: /var/lib/docker/containers/*/*-json.log
    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            time: time
            attrs: attrs
      - json:
          expressions:
            container_name: "com.docker.compose.service"
            project: "com.docker.compose.project"
          source: attrs
      - labels:
          container_name:
          project:
          stream:
      - timestamp:
          source: time
          format: RFC3339Nano
      # Filter to monitoring stack only
      - match:
          selector: '{project="opnsense-stats-dashboard"}'
          stages:
            - output:
                source: log
